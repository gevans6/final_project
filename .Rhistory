<<<<<<< dbe17a65c29ecdf5f72478f420724f5890d61587
num_repos
most_popular <- users_repos$name[users_repos$forks == max(users_repos$forks)]
most_popular
users_repos$owner.avatar_url
gitHub_data$avatar_url
help("format")
format(2016-02-09T18:08:47Z, format="%B %d %Y")
format(2016-02-09, format="%B %d %Y")
format("2016-02-09", format="%B %d %Y")
format(as.date("2016-02-09"), format="%B %d %Y")
format(as.Date("2016-02-09"), format="%B %d %Y")
help("date")
help("Date")
help("as.Date")
as.Date("2016-02-09T18:08:47Z")
help(mutate)
users_repos <- mutate(date_created = as.Date(users_repos$created_at))
library(dplyr)
users_repos <- mutate(date_created = as.Date(users_repos$created_at))
help("mutate")
users_repos <- mutate(users_repos, date_created = as.Date(users_repos$created_at))
View(users_repos)
users_repos <- mutate(users_repos, date_created = format(as.Date(users_repos$created_at), format="%B %d %Y"))
nice_table <- filter(users_repos, name, description, date_created, forks)
nice_table <- select(users_repos, name, description, date_created, forks)
View(nice_table)
help(names)
column_names <- c("Name", "Description", "Date Created", "Times Forked")
names(nice_table) <- column_names
library(knitr)
kable(nice_table)
ave_forks <- nice_table %>% summarise(mean = mean(nice_table$`Times Forked`))
ave_forks
ave_forks <- nice_table %>% summarise('Avergae Forks' = mean(nice_table$`Times Forked`))
ave_forks
summary_table <- nice_table %>% summarise('Number of Repos' = n(), Avergae Forks' = mean(nice_table$`Times Forked`))
summary_table <- nice_table %>% summarise('Number of Repos' = n(), 'Avergae Forks' = mean(nice_table$`Times Forked`))
summary_table
kable(summary_table)
gitHub_data <- fromJSON(paste0(base, name, "?", access_token))
---
title: "index"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
#Loading the following libraries
library(jsonlite)
library(knitr)
library(dplyr)
```
```{r, echo=FALSE}
# Creating the API call url and fetching the data for the given user
base <- "https://api.github.com/users/"
access_token <- "access_token=95a644b4d3d13e6889235b344a0ec048db6f9dad"
name <- "INFO-498F"
gitHub_data <- fromJSON(paste0(base, name, "?", access_token))
users_repos <- fromJSON(paste0(gitHub_data$repos_url, "?sort=created&direction=desc&per_page=100&", access_token))
users_repos <- flatten(users_repos)
num_repos <- length(users_repos$id)
most_popular <- users_repos$name[users_repos$forks == max(users_repos$forks)]
```
**Username:** `r name`
**Number of Repositories:** `r num_repos`
**Most Popular Repo:** `r most_popular`
![Profile Pic](`r gitHub_data$avatar_url`)
```{r echo=FALSE}
# Create a collum for the data that a repo was created
users_repos <- mutate(users_repos, date_created = format(as.Date(users_repos$created_at), format="%B %d %Y"))
nice_table <- select(users_repos, name, description, date_created, forks)
# Renaming the collumn names
column_names <- c("Name", "Description", "Date Created", "Times Forked")
names(nice_table) <- column_names
```
Here is a table showing the name, description, date created, and number of times the repo has been forked for the GitHub user **`r name`**
```{r echo=FALSE}
# rendering the table on the html page
kable(nice_table)
# Creating a summary table for the number of repos and the average times forked
summary_table <- nice_table %>% summarise('Number of Repos' = n(), 'Avergae Forks' = mean(nice_table$`Times Forked`))
#rendering the summary table
kable(summary_table)
```
kable(summary_table)
install.packages("plotly")
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
df$hover <- paste(df$name, "Population", df$pop/1e6, " million") # what does this do?
df$q <- with(df, cut(pop, quantile(pop))) # what does this do????
levels(df$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile") # what does this do?
df$q <- as.ordered(df$q) # what does this do?
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(df,
lon = lon,
lat = lat,
text = hover, # how does this work?
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
color = q, # what does this do?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = '2014 US city populations<br>(Click legend to toggle)', geo = g)
scope = 'washington', # what does this do?
g <- list(
scope = 'washington', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(df,
lon = lon,
lat = lat,
text = hover, # how does this work?
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
color = q, # what does this do?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = '2014 US city populations<br>(Click legend to toggle)', geo = g)
g <- list(
scope = 'usa', # what does this do?
projection = list(type = 'albers usa'), # what does this do?
showland = TRUE, # what does this do?
landcolor = toRGB("gray85"), # what does this do?
subunitwidth = 1, # what does this do?
countrywidth = 1, # what does this do?
subunitcolor = toRGB("white"), # what does this do?
countrycolor = toRGB("white") # what does this do?
)
plot_ly(df,
lon = lon,
lat = lat,
text = hover, # how does this work?
marker = list(size = sqrt(pop/10000) + 1), # what else can you adjust?
color = q, # what does this do?
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
# what if you don't pass this into the layout function?
layout(title = '2014 US city populations<br>(Click legend to toggle)', geo = g)
help(scope)
??scope
View(read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv"))
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
View(data)
library(plotly)
library(dplyr)
library(knitr)
plot_ly(data, type = 'bar', x = c(1, 2, 3, 4), y = Do.you.consider.yourself.)
plot_ly(data, type = 'bar', y = c(1, 2, 3, 4), x = Do.you.consider.yourself.)
plot_ly(data, type = 'bar', x = Do.you.consider.yourself.)
type_person <- data.frame()
View(type_person)
type_person$type <- c("A dog person", "A cat person", "Both!", "Neither")
help("data_frame")
help("data.frame")
type <- c("A dog person", "A cat person", "Both!", "Neither")
type_person <- data.frame(type = type)
View(type_person)
type_person <- data.frame(type = c("A dog person", "A cat person", "Both!", "Neither"))
data$Do.you.consider.yourself. = "Type of Person"
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
View(data)
data$Do.you.consider.yourself. = names("Type of Person")
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
dog <- data %>% filter(Do.you.consider.yourself. = "A dog person...") %>% length
dog <- data %>% filter(Do.you.consider.yourself. == "A dog person...") %>% length
dag
dog
data %>% filter(Do.you.consider.yourself. == "A dog person...")
dog <- data %>% filter(Do.you.consider.yourself. == "A dog person...") %>% length()
dog
select(Do.you.consider.yourself.) %>% length()
dog <- data %>% filter(Do.you.consider.yourself. == "A dog person...") %>%
select(Do.you.consider.yourself.) %>% length()
dog
dog <- data %>% select(Do.you.consider.yourself.) %>%
filter(Do.you.consider.yourself. == "A dog person...") %>%
length()
dog
length(data$Do.you.consider.yourself.)
data$Do.you.consider.yourself.  %>% length()
dog <- length(temp$Do.you.consider.yourself.)
temp <- filter(data, Do.you.consider.yourself. == "A dog person...")
dog <- length(temp$Do.you.consider.yourself.)
dog
View(temp)
temp <- filter(data, Do.you.consider.yourself. == "A cat person...")
cat <- length(temp$Do.you.consider.yourself.)
cat
temp <- filter(data, Do.you.consider.yourself. == "A cat person....")
cat <- length(temp$Do.you.consider.yourself.)
cat
temp <- filter(data, Do.you.consider.yourself. == "Both!")
both <- length(temp$Do.you.consider.yourself.)
both
summary_tab <- data %>%
summarise("Dog" = sum(data$Do.you.consider.yourself. == "A dog person..."))
View(summary_tab)
summary_tab <- data %>%
summarise("A Dog Person" = sum(data$Do.you.consider.yourself. == "A dog person..."),
"A Cat Person" = sum(data$Do.you.consider.yourself. == "A cat person...."),
"Both!" = sum(data$Do.you.consider.yourself. == "Both!"),
"Neither" = sum(data$Do.you.consider.yourself. == "Neither"))
plot_ly(summary_tab, type = 'bar')
plot_ly(summary_tab, type = 'bar', x = names(summary_tab))
plot_ly(summary_tab, type = 'bar', x = names(summary_tab), y = summary_tab[1])
plot_ly(summary_tab, type = 'bar', x = names(summary_tab), y = summary_tab[[1]])
help("head")
plot_ly(summary_tab, type = 'bar', x = names(summary_tab), y = head(summary_tab))
help("data.frame")
temp <- data.frame(names(summary_tab), head(summary_tab))
temp <- data.frame(type = names(summary_tab), num = head(summary_tab))
head(summary_tab)
head(summary_tab, 1)
summary_tab[1]
a <- head(summary_tab)
a
is.data.frame(a)
as.vector(a)
a
is.data.frame(a)
help("as.vector")
is.vector(a)
summary_tab[1,]
as.numeric(summary_tab[1,])
plot_ly(summary_tab, type = 'bar', x = names(summary_tab), y = as.numeric(summary_tab[1,]))
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,]), x-axis = "Type of Person")
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is out class?')
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', x-axis = "Test")
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,]), xaxis = "test") %>%
layout(title = 'What type of person is our class?')
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis = 'test')
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?')
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis = title("test"))
xaxis <- list(title = 'test')
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis = xaxis)
xaxis <- list(title = 'Type of Person')
yaxis <- list(title = 'Number of People')
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis=xaxis, yaxis=yaxis)
install.packages(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_one <- function(data) {
# Creating a summary table of the totals for the different types of people
summary_tab <- data %>%
summarise("A Dog Person" = sum(data$Do.you.consider.yourself. == "A dog person..."),
"A Cat Person" = sum(data$Do.you.consider.yourself. == "A cat person...."),
"Both!" = sum(data$Do.you.consider.yourself. == "Both!"),
"Neither" = sum(data$Do.you.consider.yourself. == "Neither"))
# Set up axis names
xaxis <- list(title = 'Type of Person')
yaxis <- list(title = 'Number of People')
# Create and return a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis=xaxis, yaxis=yaxis) %>%
return()
}
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis=xaxis, yaxis=yaxis)
library(dplyr)
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis=xaxis, yaxis=yaxis)
library(plotly)
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'What type of person is our class?', xaxis=xaxis, yaxis=yaxis)
install.packages(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
help(rnorm)
help("hist")
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
data("iris")
View(iris)
data("iris")
data <- data("iris")
View(data)
View(data("iris"))
iris$Sepal.Length
data("iris")
library(dplyr)
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
help("hist")
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
help("replace")
help(gsub)
name <- gsub("iris$", "", input$display)
shinyServer(function(input, output) {
})
name <- gsub("iris$", "", input$display)
name <- gsub("iris$", "", iris$Sepal.Length)
name2 <- gsub(".", " ", name)
name2
name
name <- gsub("iris$", "", "iris$Sepal.Length")
name2 <- gsub(".", " ", name)
name2
name
name <- gsub("iris$", "", c("iris$Sepal.Length"))
name
name2 <- gsub(".", " ", name)
name2
name <- sub("iris$", "", c("iris$Sepal.Length"))
name
name2 <- sub(".", " ", name)
name2
name2 <- sub("/.", " ", name)
name2
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='kogaj8', token='AE6402FA59AA0B0441CE5263EAE819FF', secret='AUG0w1sInAoG2AihEat/+mpHeyG62ExofOKKQDga')
devtools::install_github('rstudio/rsconnect')
install.packages("RCurl")
devtools::install_github('rstudio/rsconnect')
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='kogaj8', token='AE6402FA59AA0B0441CE5263EAE819FF', secret='AUG0w1sInAoG2AihEat/+mpHeyG62ExofOKKQDga')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('C:/Users/jkoga_000/Documents/info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
help(plotOutput())
help)(plotOutput())
help(plotOutput())
help(plotOutput)
test <- "test"
shiny::runApp('info498f/a8-building-applications')
p("test")
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
shiny::runApp('info498f/a8-building-applications')
library(dplyr)
BlackAlone <- read.csv("data/Tab01-BlackAlone.csv")
setwd("c:/Users/jkoga_000/Documents/info498f/final_project")
BlackAlone <- read.csv("data/Tab01-BlackAlone.csv")
library(dplyr)
setwd("c:/Users/jkoga_000/Documents/info498f/final_project")
BlackAlone <- read.csv("data/Tab01-BlackAlone.csv")
View(BlackAlone)
df <- data %>% filter(Ages == "Total")
library(dplyr)
df <- data %>% filter(Ages == "Total")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
df <- data %>% filter(Ages == "Total")
help("filter")
help("filter_")
totalPopulation <- function(data) {
df <- data %>% filter(Ages == "Total")
}
totalPopulation(BlackAlone)
View(df)
df <- BlackAlone %>% filter(Ages == "Total")
df
View(df)
df[1,1]
df[[1]]
df[1]
df[1,2]
totalPopulation <- function(data) {
df <- data %>% filter(Ages == "Total")
return(df[1,2])
}
test <- totalPopulation(BlackAlone)
test
is.factor(test)
is.vector(test)
as.vector(test)
test
is.factor(test)
is.vector(test)
test <- as.vector(test)
test
totalPopulation <- function(data) {
df <- data %>% filter(Ages == "Total")
return(as.vector(df[1,2]))
}
test <- totalPopulation(BlackAlone)
test
is.vector(test)
percentEnrolled <- function(data) {
df <- data %>% filter(Ages == "Total")
return(as.vector(df[1,3]))
}
test <- percentEnrolled(BlackAlone)
test
percentEnrolled <- function(data) {
df <- data %>% filter(Ages == "Total")
return(as.vector(df$PercentTotalEnrolled[1])
}
percentEnrolled <- function(data) {
df <- data %>% filter(Ages == "Total")
return(as.vector(df$PercentTotalEnrolled[1]))
}
test <- percentEnrolled(BlackAlone)
test
totalPopulation <- function(data) {
df <- data %>% filter(Ages == "Total")
return(as.vector(df$Population[1]))
}
totalPopulation(BlackAlone)
source(SummaryFunctions.R)
source('SummaryFunctions.R')
source('SummaryFunctions.R')
shiny::runApp('~/info498f/a8-building-applications')
shiny::runApp('~/info498f/a8-building-applications')
source('SummaryFunction')
source('SummaryFunction.R')
source('SummaryFunctions.R')
shiny::runApp('~/info498f/a8-building-applications')
shiny::runApp('~/info498f/a8-building-applications')
is.data.frame(BlackAlone)
summary <- head(BlackAlone)
View(summary)
help(head)
summary <- head(BlackAlone, n = 1L)
View(summary)
df <- data %>% filter(Ages == "Total")
df <- BlackAlone %>% filter(Ages == "Total")
summary$male_total <- df$Population[2]
summary$female_total <- df$Population[3]
SummaryInfo <- function(data) {
df <- data %>% filter(Ages == "Total")
summary <- head(data)
summary$male_total <- df$Population[2]
summary$female_total <- df$Population[3]
return(summary)
}
test <- SummaryInfo(BlackAlone)
is.data.frame(test)
View(test)
SummaryInfo <- function(data) {
}
SummaryInfo <- function(data) {
df <- data %>% filter(Ages == "Total")
summary <- head(data, n = 1L)
summary$male_total <- df$Population[2]
summary$female_total <- df$Population[3]
return(summary)
}
test <- SummaryInfo(BlackAlone)
View(test)
shiny::runApp('~/info498f/final_project')
=======
"Number of Mac Users interested in Informatics" = sum((data$What.orperating.system.do.you.typically.use. == "Mac") &
(data$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))
)
View(summary_tab)
summary_tab <- data %>%
summarise("Number of Mac Users" = sum(What.orperating.system.do.you.typically.use. == "Mac"),
"Number of Windows users" = sum(What.orperating.system.do.you.typically.use. == "Windows"),
"Number of Windows Users interested in Informatics" = sum((What.orperating.system.do.you.typically.use. == "Windows") &
(Are.you.interested.in.applying.to.the.Informatics.major. == "Yes")),
"Number of Mac Users interested in Informatics" = sum((What.orperating.system.do.you.typically.use. == "Mac") &
(Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))
)
summary_tab <- data %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system. == "Windows"),
"Number of Windows Users interested in Informatics" = sum((operating_system. == "Windows") &
(info_interest == "Yes")),
"Number of Mac Users interested in Informatics" = sum((operating_system. == "Mac") &
(info_interest == "Yes"))
)
summary_tab <- data %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Windows Users interested in Informatics" = sum((operating_system == "Windows") &
(info_interest == "Yes")),
"Number of Mac Users interested in Informatics" = sum((operating_system == "Mac") &
(info_interest == "Yes"))
)
View(summary_tab)
View(summary_tab)
#install.packages(dplyr)
require(dplyr)
# Read in data
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-collaborative-coding/master/data/intro_survey_data.csv?token=AP1NbC6w-vFziH4uo-eMA9wqFp2X73pjks5W1Mc8wA%3D%3D  ")
# Rename columns
names(data)[names(data)=="What.is.your.current.class.standing."] <- "class_standing"
names(data)[names(data)=="Are.you.interested.in.applying.to.the.Informatics.major."] <- "info_interest"
names(data)[names(data)=="What.operating.system.do.you.typically.use."] <- "operating_system"
names(data)[names(data)=="Using.the.command.line...terminal"] <- "command_line_terminal"
names(data)[names(data)=="What.is.your.familiarity.with..using.git.for.version.control"] <- "familiarity_git_for_vc"
names(data)[names(data)=="What.is.your.familiarity.with..Creating.documents.with.Markdown"] <- "familiarity_md"
names(data)[names(data)=="What.is.your.familiarity.with..Using.the.R.programming.language"] <- "familiarity_r"
names(data)[names(data)=="What.is.your.programming.experience."] <- "programming_exp"
names(data)[names(data)=="How.many.countries.have.you.visited.in.your.life."] <- "countries_visited"
names(data)[names(data)=="Do.you.consider.yourself."] <- "dog_or_cat_person"
names(data)[names(data)=="Are.you.a.Seahawks.fan."] <- "go_hawks"
# Information about the data
summary <- function(dataset) {
output <- list()
output$participants <- nrow(dataset)
output$freshmen <- nrow(dataset %>% filter(class_standing == "Freshman"))
output$sophomore <- nrow(dataset %>% filter(class_standing == "Sophomore"))
output$junior <- nrow(dataset %>% filter(class_standing == "Junior"))
output$senior <- nrow(dataset %>% filter(class_standing == "Senior"))
output$info_interest <- nrow(dataset %>% filter(info_interest == "Yes"))
output$windows <- nrow(dataset %>% filter(operating_system == "Windows"))
output$mac <- nrow(dataset %>% filter(operating_system == "Mac"))
output$never_used_term <- nrow(dataset %>% filter(command_line_terminal == "Never used it"))
output$no_experience_percent <- nrow(dataset %>% filter(command_line_terminal == "Never used it") %>%
filter(familiarity_git_for_vc == "Never used it") %>%
filter(familiarity_md == "Never used it") %>%
filter(familiarity_r == "Never used it")) / output$participants
output$ave_countries_visited <- mean(dataset$countries_visited)
hawks_fans <- grepl("yes", dataset$go_hawks, ignore.case = TRUE)
output$hawks_fans <- sum(hawks_fans == TRUE)
return (output)
}
library(dplyr)
library(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_two <- function(dataset) {
# Creating a summary table of the totals for the different types of people
summary_tab <- dataset %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Windows Users interested in Informatics" = sum((operating_system == "Windows") &
(info_interest == "Yes")),
"Number of Mac Users interested in Informatics" = sum((operating_system == "Mac") &
(info_interest == "Yes"))
)
# Set up axis names
xaxis <- list(title = 'Type of Person')
yaxis <- list(title = 'Number of People')
# Create a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
library(dplyr)
library(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_two <- function(dataset) {
# Creating a summary table of the totals for the different types of people
summary_tab <- dataset %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Mac Users interested in Informatics" = sum((operating_system == "Mac") &
(info_interest == "Yes")),
"Number of Windows Users interested in Informatics" = sum((operating_system == "Windows") &
(info_interest == "Yes"))
)
# Set up axis names
xaxis <- list(title = 'Type of Person')
yaxis <- list(title = 'Number of People')
# Create a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
library(dplyr)
library(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_two <- function(dataset) {
# Creating a summary table of the totals for the different types of people
summary_tab <- dataset %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Mac Users interested in Informatics" = sum((operating_system == "Mac") &
(info_interest == "Yes")),
"Number of Windows Users interested in Informatics" = sum((operating_system == "Windows") &
(info_interest == "Yes"))
)
# Set up axis names
xaxis <- list(title = 'Type of Person', tickangle = 15)
yaxis <- list(title = 'Number of People')
# Create a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
library(dplyr)
library(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_two <- function(dataset) {
# Creating a summary table of the totals for the different types of people
summary_tab <- dataset %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Mac Users interested in Informatics" = sum((operating_system == "Mac") &
(info_interest == "Yes")),
"Number of Windows Users interested in Informatics" = sum((operating_system == "Windows") &
(info_interest == "Yes"))
)
# Set up axis names
xaxis <- list(title = 'Type of Person', tickangle = 10, tickfont = list(size = 9))
yaxis <- list(title = 'Number of People')
# Create a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
library(dplyr)
library(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_two <- function(dataset) {
# Creating a summary table of the totals for the different types of people
summary_tab <- dataset %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Mac Users interested in Informatics" =
sum((operating_system == "Mac") & (info_interest == "Yes")),
"Number of Windows Users interested in Informatics" =
sum((operating_system == "Windows") & (info_interest == "Yes"))
)
# Set up axis names and fonts
xaxis <- list(title = 'Type of Person', tickangle = 10, tickfont = list(size = 9))
yaxis <- list(title = 'Number of People')
# Create a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
library(dplyr)
library(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_two <- function(dataset) {
# Creating a summary table of the totals for the different types of people
summary_tab <- dataset %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Mac Users interested in Info" =
sum((operating_system == "Mac") & (info_interest == "Yes")),
"Number of Windows Users interested in Info" =
sum((operating_system == "Windows") & (info_interest == "Yes"))
)
# Set up axis names and fonts
xaxis <- list(title = 'Type of Person', tickangle = 8, tickfont = list(size = 9))
yaxis <- list(title = 'Number of People')
# Create a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
plot_ly(x = xvar, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
bar_graph(iris, c("setosa", "versicolor", Petal.Length))
bar_graph(iris, c("setosa", "versicolor", iris$Petal.Length))
bar_graph(iris, c("setosa", "versicolor"), iris$Petal.Length)
bar_graph(iris, c("setosa", "versicolor"), iris$Petal.Length)
shiny::runApp('INFO-498/a8-building-applications')
bar_graph(iris, c("setosa", "versicolor"), iris$Petal.Length)
df <- iris
xvar <- c("setosa", "versicolor")
yvar <- iris$Petal.Length
df %>%
filter(Species == c(xvar))
df %>%
filter(Species == xvar)
df %>%
filter(Species == xvar) %>%
plot_ly(x = df$Species, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
df %>%
group_by(Species) %>%
summarise(avgSL = mean(Sepal.Length), avgSW = mean(Sepal.Width), avgPL = mean(Petal.Length), avgPW = mean(Petal.Width))
summarise(avgSL = mean(Sepal.Length), avgSW = mean(Sepal.Width), avgPL = mean(Petal.Length), avgPW = mean(Petal.Width)) %>%
plot_ly(x = Species, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
df %>%
group_by(Species) %>%
summarise(avgSL = mean(Sepal.Length), avgSW = mean(Sepal.Width), avgPL = mean(Petal.Length), avgPW = mean(Petal.Width)) %>%
plot_ly(x = Species, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
plot_ly(x = (eval(parse(text = xvar))), y = mean(eval(parse(text = yvar))), type = 'bar') %>%
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width))
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width))
filter(Species == eval(parse(text = xvar)))
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == eval(parse(text = xvar)))
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == eval(parse(text = xvar)))
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar) %>%
plot_ly(x = Species, y = df[2], type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar) %>%
plot_ly(x = Species, y = df[2], type = 'bar')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar)
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar) %>%
plot_ly(x = Species, y = df[2], type = 'bar')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
yvar <- "Petal.Length"
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, eval(parse(text = yvar)))
hi <- df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
)
hi <- df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
hi
plot_ly(hi, x = Species, y = Sepal.Width, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
plot_ly(hi, x = Species, y = "Sepal Width", type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = Sepal.Width, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = yvar, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
}
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = yvar, type = 'bar')
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = Sepal.Length, type = 'bar') %>%
layout(title = 'this the graph')
plot_ly(hi, x = Species, y = Sepal.Width, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
plot_ly(hi, x = Species, y = yvar, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
plot_ly(hi, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
xvar <- c("setosa", "versicolor", "virginica")
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
hi <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
mean(iris$Petal.Length)
mean(iris$Sepal.Width)
shiny::runApp('INFO-498/a8-building-applications')
iris %>% group_by(Species) %>% mean(Spela.Length)
iris %>% group_by(Species) %>% mean(Sepal.Length)
iris %>% group_by(Species) %>% summarise(mean(Sepal.Length))
summarise(iris, avg = mean(Sepal.Length))
yvar <- "Sepal.Length"
hi <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
bar_graph <- function(df, xvar, yvar) {
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
bar_graph <- function(df, xvar, yvar) {
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
plot_ly(newframe, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
}
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
df <- iris
xvar <- c("setosa", "virginica")
yvar <- "Sepal.Length"
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
plot_ly(newframe, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
xvar <- c("setosa", NULL, "virginica")
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
plot_ly(newframe, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
xvar <- list("setosa", "virginica")
filter(Species == xvar)
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
View(newframe)
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
View(newframe)
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
WhiteAlone <- read.csv("498_data/Tab01-WhiteAlone.csv")
BlackAlone <- read.csv("498_data/Tab01-BlackAlone.csv")
AsianAlone <- read.csv("498_data/Tab01-AsianAlone.csv")
AllRaces <- read.csv("498_data/Tab01-AllRaces.csv")
setwd("c:/Users/Grant/Documents/INFO-498/final_project")
WhiteAlone <- read.csv("498_data/Tab01-WhiteAlone.csv")
BlackAlone <- read.csv("498_data/Tab01-BlackAlone.csv")
AsianAlone <- read.csv("498_data/Tab01-AsianAlone.csv")
AllRaces <- read.csv("498_data/Tab01-AllRaces.csv")
combine_sets <- function(...){
newdf <- bind_rows(...)
return(newdf)
}
#combine_sets(WhiteAlone, BlackAlone, AsianAlone)
source('combine_sets.R')
graph_SingleByAge <- function(dataframe, yaxis) {
ytitle <- list(title = yaxis)
newSet <- dataframe %>% group_by(Gender) %>% filter(Ages != "Total")
plot_ly(newSet, x = Ages, y = newSet[[yaxis]], color = Gender, yaxis = ytitle) %>%
return()
}
dataframe <- combine_sets(WhiteAlone, AllRaces)
yaxis <- 'PercentTotalEnrolled'
graph_SingleByAge(dataframe, yaxis)
library(dplyr)
library(plotly)
library(ggplot2)
source('combine_sets.R')
graph_SingleByAge <- function(dataframe, yaxis) {
ytitle <- list(title = yaxis)
newSet <- dataframe %>% group_by(Gender) %>% filter(Ages != "Total")
plot_ly(newSet, x = Ages, y = newSet[[yaxis]], color = Gender, yaxis = ytitle) %>%
return()
}
dataframe <- combine_sets(WhiteAlone, AllRaces)
yaxis <- 'PercentTotalEnrolled'
graph_SingleByAge(dataframe, yaxis)
source('combine_sets.R')
graph_SingleByAge <- function(dataframe, yaxis) {
ytitle <- list(title = yaxis)
newSet <- dataframe %>% group_by(Gender) %>% filter(Ages != "Total")
plot_ly(newSet, x = Ages, y = newSet[[yaxis]], color = Gender) %>%
return()
}
dataframe <- combine_sets(WhiteAlone, AllRaces)
yaxis <- 'PercentTotalEnrolled'
graph_SingleByAge(dataframe, yaxis)
>>>>>>> Grant did minimal work
