layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
library(dplyr)
library(plotly)
# A function that takes a dataset as a parameter and returns a visualization chart
chart_two <- function(dataset) {
# Creating a summary table of the totals for the different types of people
summary_tab <- dataset %>%
summarise("Number of Mac Users" = sum(operating_system == "Mac"),
"Number of Windows users" = sum(operating_system == "Windows"),
"Number of Mac Users interested in Info" =
sum((operating_system == "Mac") & (info_interest == "Yes")),
"Number of Windows Users interested in Info" =
sum((operating_system == "Windows") & (info_interest == "Yes"))
)
# Set up axis names and fonts
xaxis <- list(title = 'Type of Person', tickangle = 8, tickfont = list(size = 9))
yaxis <- list(title = 'Number of People')
# Create a bar graph
plot_ly(summary_tab, type = 'bar', x = names(summary_tab),
y = as.numeric(summary_tab[1,])) %>%
layout(title = 'Are PC users or Mac users more interested in Informatics?', xaxis=xaxis, yaxis=yaxis)
}
chart_two(data)
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
plot_ly(x = xvar, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
bar_graph(iris, c("setosa", "versicolor", Petal.Length))
bar_graph(iris, c("setosa", "versicolor", iris$Petal.Length))
bar_graph(iris, c("setosa", "versicolor"), iris$Petal.Length)
bar_graph(iris, c("setosa", "versicolor"), iris$Petal.Length)
shiny::runApp('INFO-498/a8-building-applications')
bar_graph(iris, c("setosa", "versicolor"), iris$Petal.Length)
df <- iris
xvar <- c("setosa", "versicolor")
yvar <- iris$Petal.Length
df %>%
filter(Species == c(xvar))
df %>%
filter(Species == xvar)
df %>%
filter(Species == xvar) %>%
plot_ly(x = df$Species, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
df %>%
group_by(Species) %>%
summarise(avgSL = mean(Sepal.Length), avgSW = mean(Sepal.Width), avgPL = mean(Petal.Length), avgPW = mean(Petal.Width))
summarise(avgSL = mean(Sepal.Length), avgSW = mean(Sepal.Width), avgPL = mean(Petal.Length), avgPW = mean(Petal.Width)) %>%
plot_ly(x = Species, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
df %>%
group_by(Species) %>%
summarise(avgSL = mean(Sepal.Length), avgSW = mean(Sepal.Width), avgPL = mean(Petal.Length), avgPW = mean(Petal.Width)) %>%
plot_ly(x = Species, y = mean(eval(parse(text = yvar))), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
plot_ly(x = (eval(parse(text = xvar))), y = mean(eval(parse(text = yvar))), type = 'bar') %>%
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width))
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width))
filter(Species == eval(parse(text = xvar)))
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == eval(parse(text = xvar)))
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == eval(parse(text = xvar)))
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar) %>%
plot_ly(x = Species, y = df[2], type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar) %>%
plot_ly(x = Species, y = df[2], type = 'bar')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar)
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, yvar) %>%
plot_ly(x = Species, y = df[2], type = 'bar')
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
yvar <- "Petal.Length"
df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
select(Species, eval(parse(text = yvar)))
hi <- df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
)
hi <- df %>%
group_by(Species) %>%
summarise("Septal Length" = mean(Sepal.Length), "Sepal Width" = mean(Sepal.Width), "Petal Length" = mean(Petal.Length), "Petal Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
hi
plot_ly(hi, x = Species, y = Sepal.Width, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
plot_ly(hi, x = Species, y = "Sepal Width", type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = Sepal.Width, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = yvar, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
}
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = yvar, type = 'bar')
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar) %>%
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = Sepal.Length, type = 'bar') %>%
layout(title = 'this the graph')
plot_ly(hi, x = Species, y = Sepal.Width, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
plot_ly(hi, x = Species, y = yvar, type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
plot_ly(hi, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
xvar <- c("setosa", "versicolor", "virginica")
hi <- df %>%
group_by(Species) %>%
summarise("Septal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
hi <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
mean(iris$Petal.Length)
mean(iris$Sepal.Width)
shiny::runApp('INFO-498/a8-building-applications')
iris %>% group_by(Species) %>% mean(Spela.Length)
iris %>% group_by(Species) %>% mean(Sepal.Length)
iris %>% group_by(Species) %>% summarise(mean(Sepal.Length))
summarise(iris, avg = mean(Sepal.Length))
yvar <- "Sepal.Length"
hi <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
#select(Species, eval(parse(text = yvar)))
plot_ly(hi, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
bar_graph <- function(df, xvar, yvar) {
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
bar_graph <- function(df, xvar, yvar) {
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
plot_ly(newframe, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
}
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
df <- iris
xvar <- c("setosa", "virginica")
yvar <- "Sepal.Length"
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
plot_ly(newframe, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
xvar <- c("setosa", NULL, "virginica")
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
plot_ly(newframe, x = Species, y = eval(parse(text = yvar)), type = 'bar') %>%
layout(title = 'this the graph') %>%
return()
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
xvar <- list("setosa", "virginica")
filter(Species == xvar)
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
View(newframe)
newframe <- df %>%
group_by(Species) %>%
summarise("Sepal.Length" = mean(Sepal.Length), "Sepal.Width" = mean(Sepal.Width), "Petal.Length" = mean(Petal.Length), "Petal.Width" = mean(Petal.Width)) %>%
filter(Species == xvar)
View(newframe)
shiny::runApp('INFO-498/a8-building-applications')
shiny::runApp('INFO-498/a8-building-applications')
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = yaxis, color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
library(dplyr)
library(plotly)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = yaxis, color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
setwd("c:/Users/Grant/Documents/INFO-498/final_project")
WhiteAlone <- read.csv("data/Tab01-WhiteAlone.csv")
View(WhiteAlone)
BlackAlone <- read.csv("data/Tab01-BlackAlone.csv")
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = yaxis, color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = PTEset$eval(pase(text = yaxis)), color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
newyaxis <- eval(pase(text = yaxis))
print(newyaxis)
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = PTEset$eval(pase(text = yaxis)), color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
newyaxis <- eval(paste(text = yaxis))
print(newyaxis)
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = PTEset$eval(paste(text = yaxis)), color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
newyaxis <- eval(paste(text = yaxis))
print(newyaxis)
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = PTEset$newyaxis), color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender) %>% filter(Ages != 'Total')
newyaxis <- eval(paste(text = yaxis))
print(newyaxis)
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = PTEset$newyaxis, color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender)
print(newyaxis)
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = yaxis, color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender)
#View(PTEset)
plot_ly(PTEset, x = PTEset$Ages, y = yaxis, color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
graph_SingleByAge <- function(dataframe, yaxis) {
PTEset <- dataframe %>% group_by(Gender)
#View(PTEset)
plot_ly(PTEset, x = Ages, y = yaxis, color = Gender) %>%
#add_trace(x = PTEset$Ages[2:end], name = "linear", line = list(shape = "linear")) %>%
return()
}
yyy <- BlackAlone$PercentTotalEnrolled
graph_SingleByAge(BlackAlone, yyy)
# %>% filter(Ages != 'Total')
#select(Ages, y = eval(parse(text = yaxis)))
#If you want to change it to only one gender, do filter(Gender %in% "what gender you want") (this can be a parameter in the function)
PTNEsetB <- BlackAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
PTNEsetW <- WhiteAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
joined <- left_join(PTNEsetB, PTNEsetW, by = NULL, copy = FALSE)
View(joined)
PTNEsetB <- BlackAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
PTNEsetW <- WhiteAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
joined <- full_join(PTNEsetB, PTNEsetW, by = NULL, copy = FALSE)
View(joined)
PTNEsetB <- BlackAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
PTNEsetW <- WhiteAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
joined <- right_join(PTNEsetB, PTNEsetW, by = NULL, copy = FALSE)
View(joined)
PTNEsetB <- BlackAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
PTNEsetW <- WhiteAlone %>% group_by(Gender) %>% select(Ages, PercentTotalNotEnrolled)
joined <- bind_cols(PTNEsetB, PTNEsetW)
View(joined)
combine_graphs <- function(..., FUN, yaxis){
input_list <- list(...)
print(input_list)
}
combine_graphs(WhiteAlone, BlackAlone, graph_SingleByAge, yyy)
combine_graphs <- function(..., FUN, yaxis){
input_list <- list(...)
FUN(input_list)
print(input_list)
}
combine_graphs(WhiteAlone, BlackAlone, graph_SingleByAge, yyy)
combine_sets <- function(...){
input_list <- list(...)
newdf <- semi_join(input_list[1], input_list[2])
View(newdf)
}
combine_graphs(WhiteAlone, BlackAlone)
combine_sets <- function(...){
input_list <- list(...)
newdf <- semi_join(input_list[1], input_list[2])
View(newdf)
}
combine_sets(WhiteAlone, BlackAlone)
combine_sets <- function(...){
input_list <- list(...)
newdf <- semi_join(...)
View(newdf)
}
combine_sets(WhiteAlone, BlackAlone)
warnings()
combine_sets <- function(...){
input_list <- list(...)
newdf <- semi_join(..., by = "Ages")
View(newdf)
}
combine_sets(WhiteAlone, BlackAlone)
combine_sets <- function(...){
input_list <- list(...)
newdf <- full_join(..., by = "Ages")
View(newdf)
}
combine_sets(WhiteAlone, BlackAlone)
combine_sets <- function(...){
input_list <- list(...)
newdf <- left_join(..., by = "Ages")
View(newdf)
}
combine_sets(WhiteAlone, BlackAlone)
combine_sets <- function(...){
input_list <- list(...)
newdf <- right_join(..., by = "Ages")
View(newdf)
}
combine_sets(WhiteAlone, BlackAlone)
setwd("c:/Users/Grant/Documents/INFO-498/final_project")
WhiteAlone <- read.csv("data/Tab01-WhiteAlone.csv")
BlackAlone <- read.csv("data/Tab01-BlackAlone.csv")
View(WhiteAlone)
